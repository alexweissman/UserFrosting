{% extends "layouts/layout-dashboard.twig" %}
{% set page_group = "user" %}

{# Set page properties (page.*) here. #}
{% block page %}
    {# By putting this in a special block, we ensure that it will be set AFTER the default values are set in the parent template, 
    but BEFORE the page itself is rendered. #}    
    {% set page = page | merge({
        "title"       : box_title,
        "description" : "A listing of the users for your site.  Provides management tools including the ability to edit user details, manually activate users, enable/disable users, and more."
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-md-12">
        <div class='panel panel-primary'>
        <div class='panel-heading'>
            <h3 class='panel-title'><i class='{{icon}}'></i> {{box_title}}</h3>
        </div>
        <div class='panel-body'>
            <div class="table-responsive">
                <table id="table-users" class="tablesorter table table-bordered table-hover table-striped" data-sortlist="[[0, 0]]">
                    <thead>
                        <tr>
                            <th class="sorter-metatext">User/Info <i class="fa fa-sort"></i></th>
                            <th class="sorter-metanum">Registered Since <i class="fa fa-sort"></i></th>
                            <th class="sorter-metanum">Last Sign-in <i class="fa fa-sort"></i></th>
                            <th>Status/Actions <i class="fa fa-sort"></i></th>
                        </tr>
                    </thead>
                    <tbody>
                    {# If we are not using server-side pagination, then just render all results immediately #}
                    {% if not paginate_server_side %}
                        {% for user in users %}
                        <tr>
                            <td data-text="{{user.user_name}}">
                                <strong>
                                    <a href="{{site.uri.public}}/users/u/{{user.id}}">{{user.user_name}} ({{user.display_name}})</a>
                                </strong>
                                <div>
                                    <i>{{user.title}}</i>
                                </div>
                                <div>
                                    <i class="fa fa-envelope"></i> <a href="mailto:{{user.email}}">{{user.email}}</a>
                                </div>
                            </td>
                            <td data-num="{{user.sign_up_stamp | date('U')}}">
                                {{user.sign_up_stamp | date("l")}}<br>{{user.sign_up_stamp | date("M j, Y g:i a")}}
                            </td>
                            {% if user.last_sign_in_stamp %}
                            <td data-num="{{user.last_sign_in_stamp | date('U')}}">
                                {{user.last_sign_in_stamp | date("l")}}<br>{{user.last_sign_in_stamp | date("M j, Y g:i a")}}
                            </td>
                            {% else %}
                            <td data-num="0">
                                    <i>Brand new!</i>
                            </td>
                            {% endif %}
                            <td>
                                <div class="btn-group">
                                    {% if user.enabled == 0 %}
                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                            Disabled
                                            <span class="caret"></span>
                                        </button>
                                    {% elseif user.active == 0 %}
                                        <button type="button" class="btn btn-warning dropdown-toggle" data-toggle="dropdown">
                                            Unactivated
                                            <span class="caret"></span>
                                        </button>            
                                    {% else %}
                                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                                            Active
                                            <span class="caret"></span>
                                        </button>            
                                    {% endif %}
                                    <ul class="dropdown-menu" role="menu">
                                        {% if user.active == 0 %}
                                        <li>
                                            <a href="#" data-id="{{user.id}}" class="js-user-activate">
                                            <i class="fa fa-bolt"></i> Activate user
                                            </a>
                                        </li>
                                        {% endif %}
                                        <li>
                                            <a href="#" data-id="{{user.id}}" class="js-user-edit" data-target="#dialog-user-edit" data-toggle="modal">
                                            <i class="fa fa-edit"></i> Edit user
                                            </a>
                                        </li>
                                        <li>
                                        {% if user.enabled == 1 %}
                                            <a href="#" data-id="{{user.id}}" class="js-user-disable">
                                            <i class="fa fa-minus-circle"></i> Disable user
                                            </a>
                                        {% else %}
                                            <a href="#" data-id="{{user.id}}" class="js-user-enable">
                                            <i class="fa fa-plus-circle"></i> Enable user
                                            </a> 
                                        {% endif %}
                                        </li>
                                        <li>
                                            <a href="#" data-id="{{user.id}}" class="js-user-delete" data-user_name="{{user.user_name}}" data-target="#dialog-user-delete" data-toggle="modal">
                                            <i class="fa fa-trash-o"></i> Delete user</a>
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    {% endif %}
                    </tbody>
                </table>
                {% include 'components/common/table-tablesorter-default.twig' %}
            </div>
            <div class="row">
                <div class="col-md-6 ">
                    <button type="button" class="btn btn-success js-user-create" data-toggle="modal" data-target="#dialog-user-create">
                        <i class="fa fa-plus-square"></i>  Create New User
                    </button>
                </div>
                <div class="col-md-6 text-right ">
                    <a href="#">View All Users <i class="fa fa-arrow-circle-right"></i></a>
                </div>
            </div>
        </div>
        </div>
        </div>
    </div>
{% endblock %}
{% block page_scripts %}
        <!-- Include JS snippets -->
        {% include 'components/common/js-snippets/user-table-columns.twig' %}
        
        <script>
            // These options get set by Twig when the page is rendered
            var paginate_server_side = {{ paginate_server_side | default("false") }};
            var primary_group = "{{ primary_group_name | default(null) }}";
            
            $(document).ready(function() {           
                // Set up server-side pagination
                // See http://jsfiddle.net/Mottie/uwZc2/
                // Also see https://mottie.github.io/tablesorter/docs/example-pager-ajax.html
                
                var pager_options = {                    
                    // target the pager markup - see the HTML block below
                    container: $(".pager"),
                    
                    // Saves the current pager page size and number (requires storage widget)
                    savePages: false,
                    
                    output: '{startRow} to {endRow} of {filteredRows} ({totalRows})',
              
                    // apply disabled classname (cssDisabled option) to the pager arrows when the rows
                    // are at either extreme is visible; default is true
                    updateArrows: true,
              
                    // starting page of the pager (zero based index)
                    page: 0,
              
                    // Number of visible rows - default is 10
                    size: 10, 
                    
                    // Saves tablesorter paging to custom key if defined.
                    // Key parameter name used by the $.tablesorter.storage function.
                    // Useful if you have multiple tables defined
                    storageKey: 'tablesorter-pager',
              
                    // Reset pager to this page after filtering; set to desired page number (zero-based index),
                    // or false to not change page at filter start
                    pageReset: 0,
              
                    // if true, the table will remain the same height no matter how many records are displayed.
                    // The space is made up by an empty table row set to a height to compensate; default is false
                    fixedHeight: false,
              
                    // remove rows from the table to speed up the sort of large tables.
                    // setting this to false, only hides the non-visible rows; needed if you plan to
                    // add/remove rows with the pager enabled.
                    removeRows: false,
              
                    // If true, child rows will be counted towards the pager set size
                    countChildRows: false,
              
                    // css class names of pager arrows
                    cssNext        : '.next',  // next page arrow
                    cssPrev        : '.prev',  // previous page arrow
                    cssFirst       : '.first', // go to first page arrow
                    cssLast        : '.last',  // go to last page arrow
                    cssGoto        : '.gotoPage', // page select dropdown - select dropdown that set the "page" option
              
                    cssPageDisplay : '.pagedisplay', // location of where the "output" is displayed
                    cssPageSize    : '.pagesize', // page size selector - select dropdown that sets the "size" option
              
                    // class added to arrows when at the extremes; see the "updateArrows" option
                    // (i.e. prev/first arrows are "disabled" when on the first page)
                    cssDisabled    : 'disabled', // Note there is no period "." in front of this class name
                    cssErrorRow    : 'tablesorter-errorRow' // error information row
                };
                
                // Options for dynamically loading table data, if we are using server-side pagination
                if (paginate_server_side) {
                    var ajax_pager_options = {
                        ajaxUrl: site['uri']['public'] + "/api/users?",
                        // Generate the URL for the AJAX request, with the relevant parameters
                        customAjaxUrl: function(table, url) {
                            // need to dynamically update page size
                            // since adding 'rows : size' in ajaxObject.data doesn't
                            // dynamically update the size
                            table.config.pager.ajaxObject.data.size = table.config.pager.size;
                            table.config.pager.ajaxObject.data.page = table.config.pager.page;
                            
                            var sortColumns = {
                                "0" : "user_name",
                                "1" : "sign_up_stamp",
                                "2" : "last_sign_in_stamp",
                                "3" : "enabled"
                            };
                            
                            var sortOrders = {
                                "0" : "asc",
                                "1" : "desc"
                            };
                            
                            table.config.pager.ajaxObject.data.sort_field = sortColumns[table.config.sortList[0][0]];
                            table.config.pager.ajaxObject.data.sort_order = sortOrders[table.config.sortList[0][1]];
                            var filterList = $.tablesorter.getFilters(table);
                            var filters = {};
                            for (i = 0; i < filterList.length; i++){
                                if (filterList[i]) {
                                    filters[sortColumns[i]] = filterList[i];
                                }
                            }
                            table.config.pager.ajaxObject.data.filters = filters;
                            
                            // Limit to a particular primary group
                            if (primary_group) {
                                table.config.pager.ajaxObject.data.primary_group = primary_group;
                            }
                            return url;
                        },
                        ajaxObject: {
                            data: {
                                // rows   : size, // this doesn't work because size can't be updated dynamically 
                            }
                        },
                        ajaxProcessing: function (data) {
                            var $table = $(this);
                            if (data) {
                                //console.log(data);
                                var col, row, txt,
                                    // make # column show correct value
                                    index = $('#table-users')[0].config.pager.page,
                                    json = {},
                                    rows = '';
                                size = data['rows'].length;
                                // Render table cells via Handlebars
                                var template_0 = Handlebars.compile($("#user-table-column-info").html());
                                var template_1 = Handlebars.compile($("#user-table-column-registered-since").html());
                                var template_2 = Handlebars.compile($("#user-table-column-last-sign-in").html());
                                var template_3 = Handlebars.compile($("#user-table-column-actions").html());
                                for (row = 0; row < size; row++){
                                    rows += '<tr>';
                                    var cell_data = {
                                        "user" : data['rows'][ row ],       // It is safe to use the data from the API because Handlebars escapes HTML
                                        "site" : site
                                    };
                                    rows += template_0(cell_data);
                                    rows += template_1(cell_data);
                                    rows += template_2(cell_data);
                                    rows += template_3(cell_data);
                                    rows += '</tr>';
                                }
                                json.total = data['count'];  // Get total rows without pagination
                                json.filteredRows = data['count_filtered']; // no filtering
                                json.rows = $(rows);
                                return json;
                            }
                        }                
                    };
                    $.extend(pager_options, ajax_pager_options);
                }
                
                $('#table-users').tablesorter({
                    debug: false,
                    theme: 'bootstrap',
                    widthFixed: true,
                    widgets: ['filter']
                })
                .tablesorterPager(pager_options)
                .bind('pagerComplete', function(e, table) {
                    // Link buttons
                    if (paginate_server_side) {
                        bindUserTableButtons($('#table-users'));
                    }
                });
            });
        </script>
    
{% endblock %}

